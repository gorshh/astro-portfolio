---
import Container from "../common/Container.astro";
import P from "../common/P.astro";
import ExperienceDesktopTitleList from '../common/ExperienceDesktopTitleList.astro'
import ExperienceDescriptions from '../common/ExperienceDescriptions.astro'
---

<section class="relevant-experience" id="relevant-experience">
  <Container>
    <P as="h2">Relevant experience</P>
    <P class="relevant-experience__description"
      >I'm a Full-Stack Developer with 5+ years of experience in React, Next.js,
      Astro, Node.js, AWS, RESTful APIs and software architecture. Expert in
      testing, CI/CD and agile development. Explore my work.</P
    >
    <div class="relevant-experience__container">
      <!-- <ExperienceDesktopTitleList />   -->
      <ExperienceDescriptions />
    </div>
  </Container>
</section>

<style>
  .relevant-experience {
    padding: 32px 0;
    position: static;
  }

  .relevant-experience__description {
    max-width: 70ch;
  }

  .relevant-experience__container {
    display: flex;
    height: 100%;
    margin-top: 64px;
  }

</style>

<script>
  const section = document.getElementById("relevant-experience")!;
  const experiences = document.querySelectorAll(".experience");
  const jobDescriptions = document.querySelectorAll(".job-description");

  const { body } = document;

  let activeElement: Element | null = null;

  experiences.forEach((experience, index) => {
    experience.addEventListener("mouseenter", () => {
      experiences.forEach((item) => item.classList.remove("active"));
      jobDescriptions.forEach((desc) => desc.classList.remove("active"));

      experience.classList.add("active");
      jobDescriptions[index].classList.add("active");

      const experienceColor = experience.getAttribute("data-experience")!;
      body.setAttribute("experience", experienceColor);

      activeElement = experience;
    });
  });

  function handleIntersection(entries: IntersectionObserverEntry[]): void {
    entries.forEach((entry) => {
      console.log(entry.isIntersecting)
      if (entry.isIntersecting) {
        document.body.setAttribute("experience", "globant-1");
        const firstExperience = experiences[0];
        jobDescriptions[0].classList.add("active");
        firstExperience.classList.add("active");
      } else {
        resetSection();
      }
    });
  }

  function resetSection() {
    body.removeAttribute("experience");
    if (activeElement) {
      activeElement.classList.remove("active");
      jobDescriptions.forEach((desc) => desc.classList.remove("active"));
      const firstExperience = experiences[0];
      jobDescriptions[0].classList.add("active");
      firstExperience.classList.add("active");
    }
  }

  const observer = new IntersectionObserver(handleIntersection, {
    threshold: 0.7,
  });

  observer.observe(section);
</script>
