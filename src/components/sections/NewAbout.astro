---
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import Container from "../common/Container.astro";
import P from "../common/P.astro";


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Container as="section" id={t('nav.id')}>
  <div class="about--container">
    <P class="about--title" fontFamily="pp-mori">{t('about.title')}</P>
    <P size="display-xxl" class="about--title scroll-reveal">ðŸ‘‹ Hey, I'm Jorge â€” a developer who cares <i>just as much</i> about smooth
      animations and crisp layouts as clean, scalable code.</P>
    <P size="heading-lg" class="about--first--description scroll-reveal">{t('about.first-description')}</P>
    <P class="about--first--small-description scroll-reveal"
      >{t('about.first-small-description')}&nbsp;(<em>{t('about.first-small-description-thinking')}</em>).</P
    >
  </div>
</Container>

<style>
  #about {
    color: var(--black-color);
    background-color: var(--white-color);
    padding-top: 4rem;
    padding-bottom: 4rem;

    border-top-left-radius: 1rem;
    border-top-right-radius: 1rem;

    @media (min-width: 1024px) {
      min-height: 100dvh;
      padding-top: 7rem;
      padding-bottom: 5rem;
    }

    .about--container {
      text-align: center;
      max-width: 1080px;
      margin: 0 auto;
    }

    .about--title {
      margin-bottom: 2rem;

      @media (min-width: 1366px) {
        margin-bottom: 4rem;
      }
    }

    .about--first--description {
      max-width: 800px;
      margin: 0 auto;
      /* margin-bottom: 2rem; */
      margin-bottom: 1rem;
      @media (min-width: 1366px) {
        margin-bottom: 2rem;
      }
    }
    .about--first--small-description {
      max-width: 450px;
      margin: 0 auto;
      opacity: 0.8;
      text-wrap: pretty;
    }

    .scroll-reveal {
      opacity: 0;
      transform: translateY(60px);
      transition:
        opacity 0.3s ease-out,
        transform 0.3s ease-out;
      will-change: opacity, transform;
    }
  }
</style>

<script>
  const revealElements = document.querySelectorAll(".scroll-reveal");

  function handleScrollReveal() {
    const viewportHeight = window.innerHeight;

    revealElements.forEach((el) => {
      const element = el as HTMLElement;

      const rect = el.getBoundingClientRect();
      const offset = rect.top;

      const startRevealAt = viewportHeight * 0.95;
      const endRevealAt = viewportHeight * 0.85;

      if (offset < startRevealAt && offset > endRevealAt) {
        const progress =
          1 - (offset - endRevealAt) / (startRevealAt - endRevealAt);
        element.style.opacity = progress.toFixed(2);
        element.style.transform = `translateY(${(1 - progress) * 40}px)`;
      } else if (offset <= endRevealAt) {
        element.style.opacity = "1";
        element.style.transform = "translateY(0)";
      } else {
        element.style.opacity = "0";
        element.style.transform = "translateY(40px)";
      }
    });
  }

  window.addEventListener("scroll", handleScrollReveal);
  window.addEventListener("load", handleScrollReveal);
</script>
