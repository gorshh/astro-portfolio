---
import Container from "../common/Container.astro";
import P from "../common/P.astro";
import GradientText from '../common/GradientText.astro'
---

<Container class="catch-me">
  <section class="catch-me__hero">
    <div class="hero-content">
      <P class="catch-me__text" size="display-xxl" as="h2">
        Frontend, Backend and Everything in Between. Let's <GradientText>create</GradientText> awesome digital products.
      </P>
    </div>

    <a href="mailto:hi@jorshh.com" class="catch-me-btn">ping me a message</a>
  </section>
</Container>

<style>
  .catch-me {
    background-color: var(--white-color);
    padding: 1rem;
    height: 100vh;
  }
  /* Section layout */
  .catch-me__hero {
    display: flex;

    justify-content: center;
    align-items: center;
    /* text-align: center; */
    height: 95vh;
    background: var(--black-color);
    color: var(--white-color);
    position: relative;
    overflow: hidden;
    border-radius: 1rem;
    padding: 2rem;
  }

  /* Subtle grid background */
  .catch-me__hero::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 300%;
    height: 300%;
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.05) 1px,
        transparent 1px
      ),
      linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
    animation: moveGrid 5s linear infinite;
    opacity: 0.8; /* Adjust to make it subtle */
  }

@keyframes moveGrid {
  from {
    transform: translate(0, 0);
  }
  to {
    transform: translate(-40px, -40px); /* Slow diagonal movement */
  }
}

  /* Heading animation */
  .catch-me__text {
    text-transform: uppercase;
    text-wrap: pretty;
    color: var(--white-color);
    font-family: "PP Mori";
  }

  /* Catch me button */
  .catch-me-btn {
    position: fixed;
    padding: 12px 24px;
    width: max-content;
    height: max-content;
    font-size: 1.5rem;
    font-weight: 600;
    border: solid 1px #d5ff63;
    color: #fff;
    border-radius: 0.5rem;
    text-decoration: none;
    text-transform: uppercase;
    

    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: color 0.3s ease-in-out, background 0.2s ease-in; /* Smooth fade effect */
  }

  /* Button hover effect */
  .catch-me-btn:hover {
    background: #d5ff63;
    color: var(--black-color);
  }

  .target-section {
    width: 100%;
    height: 50vh;
    background-color: #f0f0f0;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    border: 2px dashed #ccc;
    overflow: hidden;
    position: relative;
  }
</style>

<script>
  const button = document.querySelector(".catch-me-btn")! as HTMLHtmlElement;
  const section = document.querySelector(".catch-me__hero") as HTMLElement;

  let isInside = false; 
  let isSectionOnViewport = false;


  section.addEventListener("mouseenter", () => {
      isInside = true;
      button.style.opacity = "1"; // Show the element
    });

    section.addEventListener("mousemove", (event) => {
      if (!isInside) return; // Only move when inside the section
      
      const { clientX, clientY } = event;

      button.animate(
        {
          left: `${clientX}px`,
          top: `${clientY}px`
        },
        { duration: 3000, fill: "forwards" }
      );
    });

    section.addEventListener("mouseleave", () => {
      isInside = false;
      button.style.opacity = "0"; // Hide the element
    });


  const observer = new IntersectionObserver(
    ([entry]) => {
      if (entry.isIntersecting) {
        // isSectionOnViewport = true
        isInside = true;
        button.style.opacity = "1";
      } else {
        // isSectionOnViewport = false;
        isInside = false;
        button.style.opacity = "0";
      }
    },
    { threshold: 0.8 }
  );

  observer.observe(section);
</script>
