---
import Link from "../common/Link.astro";
import Container from "../common/Container.astro";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Container as="section" id="home">
  <header class="hero-header">

    <div class="left-side">
      <h1 class="heading-style-header">
        {t("hero.title")}
      </h1>
    </div>
    <Link href="#contact" class="cta">{t("hero.cta")}</Link>
  </header>
  
  <div id="ascii-container" style="white-space: pre; font-family: monospace; line-height: 1;"></div>

  <!-- <ScrollDown /> -->
</Container>

<style>
  #home {
    height: 100dvh;
    padding-top: 1rem;
    position: sticky;
    top: 0;
    font-family: "PP Mori";
    background-color: var(--black-color);
    color: rgba(var(--white-rgb), 0.8);
  }
  .hero-header {
    border-radius: 0.6rem;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0rem;
    display: flex;
    text-transform: uppercase;
    font-size: 0.8rem;
  }

  .heading-style-header {
    text-transform: uppercase;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .left-side {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .cta {
    font-size: 0.9rem;
    font-weight: 600;

    @media (max-width: 670px) {
      display: none;
    }
  }

  
  #ascii-container {
    white-space: pre;
    line-height: 1;
    font-size: 12px;
    
    width: fit-content;
    margin: 0 auto;
    overflow: hidden; /* Evita el desbordamiento */
    .yellow {
      color: #D6DA00;
      display: inline-block;
    }

    .light {
      color: #F5FA8A;
      display: inline-block;
    }
    
    .background {
      display: inline-block;
      opacity: 0;
    }

    .shadow {
      color: #ffde26;
      display: inline-block;
    }
  }

  /*  */

</style>

<script>
  const container = document.getElementById("ascii-container")!;
  const TOTAL_FRAMES = 174; // cambia este nÃºmero al total de tus frames
  const FRAME_PATH = "/frames/frame_";
  const FRAME_DELAY = 1000 / 30; // 24fps
  


  let currentFrame = 1;
  const frames = [];

  const loadFrames = async () => {
  const pad = (num:number, size:number) => String(num).padStart(size, "0");

  const framePromises = Array.from({ length: TOTAL_FRAMES }, (_, i) => {
    const frameNum = pad(i + 1, 4);
    return fetch(`${FRAME_PATH}${frameNum}.txt`)
      .then(res => res.text())
      .catch(e => {
        console.error(`Error loading frame ${frameNum}:`, e);
        return ""; // evita que Promise.all truene
      });
  });

  frames.push(...(await Promise.all(framePromises)));
};

  const playAnimation = () => {
    // container.innerHTML = frames[0];
      // currentFrame = (currentFrame + 1) % frames.length;
    setInterval(() => {
      container.innerHTML = frames[currentFrame];
      currentFrame = (currentFrame + 1) % frames.length;
    }, FRAME_DELAY);
  };

  const start = async () => {
    await loadFrames();
    playAnimation();
  };

  start();
</script>
