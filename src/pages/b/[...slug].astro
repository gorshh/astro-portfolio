---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
import { topicToUrl } from "../../utils/topicToUrl";
import PostSection from "../../components/sections/Post.astro";
import LatestArticles from "../../components/sections/ArticlesList.astro";
import { getReadingTime } from "../../utils/readingTime";
import type { Post } from "../../types/post";
import Breadcrumb from "../../components/common/Breadcrumb.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  const topicSet = new Set<string>();
  const paths = [];

  for (const post of posts) {
    const topic = post.data.topic;

    paths.push({
      params: {
        slug: `/${topicToUrl(topic)}/${post.slug}`,
      },
      props: { entry: post },
    });

    topicSet.add(topic);
  }

  // Generar paths por topic
  for (const topic of topicSet) {
    paths.push({
      params: {
        slug: `/${topicToUrl(topic)}`,
      },
      props: { entry: topic },
    });
  }

  return paths;
}

type Props = {
  entry: CollectionEntry<"posts"> | string;
};

const { entry } = Astro.props;

const isPost = typeof entry === "object" && "render" in entry;
const isTopic =
  typeof entry === "string" ||
  (typeof entry === "object" && "topic" in entry && !("render" in entry));

let topicPosts: Post[] = [];

if (isTopic) {
  const allPosts = await getCollection("posts");

  topicPosts = allPosts
    .filter((p) => p.data.topic === entry)
    .map((p) => ({
      id: p.id,
      slug: p.slug,
      heroImage: p.data.heroImage,
      title: p.data.title,
      topic: p.data.topic,
      date: p.data.date,
      description: p.data.description,
      estimatedMinutes: getReadingTime(p.body),
      sources: p.data.sources || []
    })).sort((a, b) => b.date.getTime() - a.date.getTime());

  // console.log(topicPosts)
}
---

{isPost && <PostSection entry={entry} />}

{
  isTopic && (
    <BlogLayout
      title={`Posts about ${entry}`}
      description={`Posts under the ${entry} topic`}
    ><section class="posts-container">
      <Breadcrumb
          topic={"Blog"}
          title={entry}
        />
      <LatestArticles posts={topicPosts} title={`Posts about ${entry}`}/>
    </section>
    </BlogLayout>

  )
}
<style>
  .posts-container {
    max-width: 1280px;
    margin: 0 auto;
    margin-top: 4rem;
    padding: 0.75rem;
  }
</style>