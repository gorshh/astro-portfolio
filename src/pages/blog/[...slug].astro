---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
import Breadcrumb from "../../components/common/Breadcrumb.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  // very important how you name object here (eg. entry), so you can destruct it below
  return posts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<"posts">;
};

const { entry } = Astro.props;
const author = await getEntry("authors", "jorge")!;
const { Content } = await entry.render();
---

<BlogLayout title={entry.data.title}>
  <section class="post">
    <article class="article">
      <header>
        <Breadcrumb topic={'Blog/'+entry.data.topic} title={entry.data.title} />
        <h1>{entry.data.title}</h1>
        <Image src={entry.data.heroImage} class="hero-image" alt={entry.data.title} inferSize/>
      </header>

      <div>
        <Content />
      </div>
      <article class="tags">
        {
          entry.data.tags.map((tag) => (
            <a href={`/blog/tags/${tag}`} class="tag">
              #{tag}
            </a>
          ))
        }
      </article>

      <footer class="article-footer">
        <dl>
          <div>
            <dt>Author</dt>
            <dd>{author.data.name}</dd>
            <dd>{author.data.bio}</dd>
          </div>
          <div>
            <dt>Posted on</dt>
            <dd>
              <time datetime={entry.data.date.toISOString()}
                >{entry.data.date.toLocaleString()}</time
              >
            </dd>
          </div>
        </dl>
      </footer>
    </article>
    <div class="on-this-page">
      <p>On this page</p>
      <ul>
        <li><a href="">Express + Bun + TypeScript + express-validator</a></li>
        <li><a href="">Requisitos</a></li>
        <li><a href="">Instalaci√≥n del Proyecto</a></li>
        <li><a href="">Estructura de Archivos</a></li>
      </ul>
    </div>
  </section>
</BlogLayout>

<style>
  .post {
    max-width: 1280px;
    margin: 0 auto;
    /* border: solid 1px red; */
    margin-top: 4rem;
    padding: 0.75rem;
    display: flex;
  }

  .article {
    /* max-width: 74ch; */
    /* line-height: 1.4rem; */
    /* padding: 1rem; */
    line-height: 1.6;

    border-right: 1px #1f2023 solid;
    padding-right: 10rem;
    /* font-size: 1.1rem; */
    color: white;
    max-width: 960px;

    header {
      .go-back {
        color: rgb(143, 143, 153);
        text-decoration: none;
        margin-bottom: 1rem;
        display: block;

        &:hover {
          color: white;
        }
      }
    }

    .hero-image {
      border-radius: 0.5rem;
      aspect-ratio: 16/9;
      margin: 1rem 0 2rem;
      width: 100%;
      object-fit: cover;
    }
    h1 {
      font-size: 32px;
      color: white;
      font-family: "PP Mori";
      line-height: normal;
      margin-bottom: 0.5rem;
    }

    h2 {
      font-size: 22px; /* 1.375rem */
      color: white;
      font-family: "PP Mori";
      line-height: 1.3;
      margin-bottom: 0.5rem;
    }

    h3 {
      font-size: 18px; /* 1.125rem */
      color: white;
      font-family: "PP Mori";
      line-height: 1.35;
      margin-bottom: 0rem;
    }

    h4 {
      font-size: 16px; /* 1rem */
      color: white;
      margin-bottom: 0rem;
      line-height: 1.4;
    }

    p {
      margin-bottom: 1rem;
      color: rgb(231, 231, 231);
    }

    .github-dark {
      padding: 1rem;
      margin: 1rem 0;
      border-radius: 0.5rem;
    }

    code {
      background-color: rgb(31, 32, 35);
      padding: 0.25rem;
      border-radius: 0.25rem;
    }

    .astro-code code {
      background-color: transparent;
    }

    .copy-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: #2d2d30;
      color: #f4f4f5;
      border: none;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 12px;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s ease;
    }

    .copy-button:hover {
      opacity: 1;
    }

    pre {
      position: relative;
      padding-top: 2.5rem; /* para no tapar el bot√≥n */
    }

    hr {
      border: 1px solid rgb(27, 27, 27);
      /* border: 1px solid red; */
      margin: 2rem 0;
    }

    a {
      color: white;
    }

    ul,
    ol {
      list-style: none;
      padding-left: 0rem;
      margin: 0rem 0rem 1rem;
    }

    li {
      margin: 0;
      padding: 0;

      &::before {
        content: "‚Ä¢";
        margin-right: 0.4rem;
        display: inline;
      }

      p {
        display: contents;
      }
    }

    .tags {
      margin-top: 2rem;

      h3 {
        margin-bottom: 0.5rem;
      }
    }
    .tag {
      background-color: rgb(31, 32, 35);
      padding: 0.5rem;
      border-radius: 0.5rem;
      margin-right: 1rem;
      color: white;
    }

    .article-footer {
      margin-top: 2rem;
      padding: 1rem 0;
      border-top: 1px solid rgb(31, 32, 35);
      display: flex;
      justify-content: space-between;
      align-items: center;

      dl {
        display: flex;
        gap: 2rem;

        dt {
          font-weight: bold;
          color: white;
        }
        dd {
          color: rgb(231, 231, 231);
        }
      }
    }
  }

  .on-this-page {
    margin: 0 auto;
    /* outline: 1px red solid; */
    /* max-width: 800px; */
    height: fit-content;
    /* width: 20px; */
    position: sticky;
    top: 90px;
    margin-left: 1rem;
    font-size: 14px;

    /* padding: 2rem; */
    /* font-size: 1.5rem; */
    line-height: 1.6;
    color: rgb(143, 143, 153);

    ul {
      list-style: none;
      /* padding-left: 2rem; */
      color: #cfcfd3;

      li {
        a {
          color: #cfcfd3;
        }
      }
    }
  }
</style>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("pre > code").forEach((codeBlock) => {
      const button = document.createElement("button");
      button.innerText = "üìã Copy";
      button.className = "copy-button";

      const pre = codeBlock.parentElement;
      pre.style.position = "relative";
      pre.appendChild(button);

      button.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(codeBlock.innerText);
          button.innerText = "‚úÖ Copied";
          setTimeout(() => (button.innerText = "üìã Copy"), 2000);
        } catch (err) {
          console.error("Error:", err);
          button.innerText = "‚ö†Ô∏è Error";
        }
      });
    });
  });
</script>
